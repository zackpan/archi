var debug = false;
console.show();
console.clear();

load(__DIR__ + "lib/papaparse.js");

console.log("> Loaded Papa Parse");

function scan( component )
{
	// console.log('scan children of ' + component.name );
	$(component).children().not("relationship").each(function(c) {
		if( c.type == "application-component" )
		{
			if( $(c).prop('imdb match') === 'yes' )
			{
				$(c).attr("fontColor", "#F00000");
			}				
			else if( $(c).prop('imdb match') === 'translate' ) {
				$(c).attr("fontColor", "#00F000");
			}
			scan(c);	
		}
		else if( c.type == 'grouping' )
		{
			scan(c);
		}
	});
}

console.log("> Import AACB_CMDB.CSV");
var filePath = 'e:\\Archi\\AACB_CMDB.csv'; // '/home/zackpan/code/archi/AACB_CMDB.csv'; // window.promptOpenFile({ title: "Open CSV", filterExtensions: ["*.CSV"], fileName: "default.archimate" });
if (filePath) {
    var FileReader = Java.type("java.io.FileReader");
    var Types = Java.type("java.nio.charset.StandardCharsets");
    var theCSVFile = new FileReader(filePath,Types.UTF_8);

    var theCSV ="";
    
    var data = theCSVFile.read();
    console.log("> Please Wait...");
    while(data != -1) {
        var theCharacter = String.fromCharCode(data);
        theCSV+=theCharacter;
        data = theCSVFile.read();
    }
    theCSVFile.close();

    console.log("> File Loaded");
    theDataFile = Papa.parse(theCSV);

    theData = theDataFile.data;

    theDataHeaders = theData[0];
    for(var i = 0; i < theDataHeaders.length; i++) 
    {
        console.log(i + ' : ' + theDataHeaders[i]);
    }
    
    console.log("Total Data Rows: ", theData.length);

    var imdb_map = new Map();

    var match_result = [];
    var match_headers = ["Name", "Matched"];

    var columns = ["Number", "Name", "OAR_ID","Confidentiality","Integrity","Availability","Service_Class","Operational_Status",
        "RPO","RTO","Subcategory","Support_Group","Block_Owner","Approval_Group","Application_Owner", "Product_Owner", "Business_Owner",
        "Application_Access_Fulfilment_Group", "Global-Regional", "Crown_Jewel", "Created", "Location", "Classification", "Matched", "Archi_Name"];
    console.log("Column Size = "+columns.length);

    for( var i = 1; i < theData.length; i++ ) {
        var theConcept = null;
        var theObject = [];
        
        // console.log(theData[i][1] + ',' + theData[i][2] + ',' + theData[i][10] + ',' + theData[i][18]);
      
        for (var j=0; j<columns.length; j++) {
            theObject[columns[j]]=theData[i][j];
        } 
        
        if(theData[i][24] && theData[i][24] != '' && theData[i][23] != 'Yes') {
            imdb_map.set(theData[i][24], theObject);
            console.log('Name Translated:' + theData[i][1] + ' - ' + theData[i][24]);
            //if(theData[i][24] == 'ACG')
            //    console.log(imdb_map.get('ACG'));
        }
        else
            imdb_map.set(theData[i][1], theObject);
    }
    
    index = 0;
    var app_components = $("element").filter( function(e) {
        return e.type == 'application-component';
    }); 
    app_components.each(function(o) {
        if(imdb_map.get(o.name) != null )
        {
            var object = imdb_map.get(o.name);
            //if(o.name == 'Spark')
            //     console.log(imdb_map.get('Spark'));
            if(object["Archi_Name"] && object["Matched"] != 'Yes' ) // has translation 
            {
                object["Matched"] = 'Translate';
                object["Archi_Name"] = o.name;
                $(o).prop('imdb match', 'translate');            
                match_result[index] = [object["Name"], 'Translate'];
                console.log('Translate: ' + object["Name"] + ' - ' + o.name );
            }
            else
            {
                match_result[index] = [o.name, 'Yes'];
                object["Matched"] = 'Yes';
                object["Archi_Name"] = o.name;
                $(o).prop('imdb match', 'yes');
                if(o.name == 'TCC' )
					console.log('Match Found: '+o.name);
            }
			
        }
        else
        {
            match_result[index] = [o.name, 'No'];
        }
        index++;    
    });
    
    $('archimate-diagram-model').each(function(v) {
        if(v.name == 'A 2 Core clearing applications EU')
        {
			console.setTextColor(255, 0, 0);
			console.log('\n\n ' + v.type + ' -- ' + v.name + '\n\n');
			$(v).children().each(function(o) {
			//	console.log(o.name + ' - ' + o.type );
			});
			console.setDefaultTextColor();
		}
		// recursive function scan
		scan(v);
		/*
        $(v).children().not("relationship").each(function(o) {

            if(o.type === 'application-component' ){
                 //$(o).prop('CIA', '211');
				
				if( $(o).prop('imdb match') === 'yes' )
				{
					$(o).attr("fontColor", "#FF0000");
					//console.log( $(o).prop('Owner'));
					//console.log(o.type + ' : ' + o.name); 
				}				
				else if( $(o).prop('imdb match') === 'translate' ) {
					$(o).attr("fontColor", "#00FF00");
				}

				$(o).children().filter("application-component").each(function(c) {
					if( $(c).prop('imdb match') === 'yes' )
					{
						$(c).attr("fontColor", "#F00000");
						//console.log( $(c).prop('Owner'));
						//console.log(c.type + ' : ' + c.name); 
					}				
					else if( $(c).prop('imdb match') === 'translate' ) {
						$(c).attr("fontColor", "#00F000");
					}	
					$(c).children().filter("application-component").each(function(g) {
						if( $(g).prop('imdb match') === 'yes' )
						{
							$(g).attr("fontColor", "#F00000");
							//console.log( $(g).prop('Owner'));
							//console.log(g.type + ' : ' + g.name); 
						}				
						else if( $(g).prop('imdb match') === 'translate' ) {
							$(g).attr("fontColor", "#00F000");
						}						
					});					
				});
            }
			if(o.type === 'grouping') {
			
				if(o.name == 'Exchange/CCP connectivity & Message transfer EU' )
					console.log('Exchange Group in view: ' + v.name + ' - ' + o.name );
				$(o).children().filter("application-component").each(function(c) {
					if(o.name == 'Exchange/CCP connectivity & Message transfer EU' )
						console.log(c.name + ' - ' + c.type );
					if( $(c).prop('imdb match') === 'yes' )
					{
						$(c).attr("fontColor", "#F00000");
						//console.log( $(c).prop('Owner'));
						//console.log(c.type + ' : ' + c.name); 
					}				
					else if( $(c).prop('imdb match') === 'translate' ) {
						$(c).attr("fontColor", "#00F000");
					}	
					$(c).children().filter("application-component").each(function(g) {
						if( $(g).prop('imdb match') === 'yes' )
						{
							$(g).attr("fontColor", "#F00000");
							//console.log( $(g).prop('Owner'));
							//console.log(g.type + ' : ' + g.name); 
						}				
						else if( $(g).prop('imdb match') === 'translate' ) {
							$(g).attr("fontColor", "#00F000");
						}						
					});								
				});
			}
        });
		*/
    });  
      
    console.log("> Parsing Complete");
    // console.log(match_result);

    var results = [];

    imdb_map.forEach(function(row) {
        var val = [];
        
        for (let x in row) {
            val.push(row[x]);
        }
        // val.slice(0, -1);
        results.push(val);
    });
    

    // Open a dialog to let the user choose where to save the generated file
    var defaultFileName = "MatchResult.csv"; // Default file name
    var matchFile = window.promptSaveFile({ title: "Export to CSV", filterExtensions: [ "*.csv" ], fileName: defaultFileName } );
    var matchCSV = Papa.unparse({fields:match_headers, data:match_result});
    if(matchFile != null) {
            debug? console.log("> TheCSV"):true;
            debug? console.log(theCSV):true;
            $.fs.writeFile(matchFile, matchCSV);
            console.log("> Match Export done");
    }
    else {
        window.alert("File open canceled.");
    }
    var imdbCSV = Papa.unparse({fields:columns, data:results});
    // var filePathNew = 'e:\\Archi\\AACB_CMDB_UPDATE.csv';
    $.fs.writeFile(filePath, imdbCSV);
 
    
    console.log("> IMDB Export done");
    console.log("End toCsv Script"); 
}
else {
    console.log("> File Not Found");
}
