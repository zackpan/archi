/*
 * Import from CSV
 * 
 * Requires jArchi - https://www.archimatetool.com/blog/2018/07/02/jarchi/
 * Requires PapaParse - https://www.papaparse.com/
 * Works with Export to CSV Script - https://gist.github.com/smileham/15c445b17a92bd6f5dc1508e573bcd8a
 * 
 * Version 1: Import from CSV
 * Version 1.1: Force character encoding to use UTF-8
 *
 * (c) 2018 Steven Mileham
 *
 */

var debug = true;

console.show();
console.clear();
console.log("> Import CSV");

load(__DIR__ + "lib/papaparse.js");

console.log("> Loaded Papa Parse");

var filePath = 'e:\\Archi\\AACB_CMDB.csv'; // window.promptOpenFile({ title: "Open CSV", filterExtensions: ["*.CSV"], fileName: "default.archimate" });
if (filePath) {
    var FileReader = Java.type("java.io.FileReader");
    var Types = Java.type("java.nio.charset.StandardCharsets");
    var theCSVFile = new FileReader(filePath,Types.UTF_8);

    var theCSV ="";
    
    var data = theCSVFile.read();
    console.log("> Please Wait...");
    while(data != -1) {
        var theCharacter = String.fromCharCode(data);
        theCSV+=theCharacter;
        data = theCSVFile.read();
    }
    theCSVFile.close();

    console.log("> File Loaded");
    theDataFile = Papa.parse(theCSV);

    theData = theDataFile.data;

    theDataHeaders = theData[0];
    for(var i = 0; i < theDataHeaders.length; i++) 
    {
        console.log(theDataHeaders[i]);
    }
    
    console.log("Total Data Rows: ", theData.length);

// Number	Name	OAR ID	Confidentiality	Integrity	Availability	Service Class	Operational status	RPO	RTO	Subcategory	Support group	Block Owner (3rd line support)	Approval group	Application Owner 	Product Owner (in case GRID Block)	Business Owner	Application Access Fulfilment Group	Global/ Regional Application	Crown Jewel	Created	Location	Classification

    var commonProperties = ["Number", "Name", "OAR_ID","Confidentiality","Integrity","Availability","Service_Class","Operational_Status","RPO","RTO","Subcategory","Support_Group","Block_Owner","Approval_Group","Application_Owner", "Product_Owner", "Business_Owner", "Application_Access", "Fulfilment_Group", "Global-Regional", "Crown_Jewel", "Created_Location", "Classification"];

    for( var i = 1; i < theData.length; i++ ) {
        var theConcept = null;
        var theObject = [];
        
        console.log(theData[i][1] + ',' + theData[i][2] + ',' + typeof(theData[i][1]));

        if( theData[i][1] === "DRAGON" ) {
            for (var j=0; j<commonProperties.length; j++) {
                theObject[commonProperties[j]]=theData[i][j];
            } 
            console.log(theObject);
        }
    
  
/*
        theConcept = $("#"+theObject.OAR_ID).first();
        if (!theConcept) {
            debug? console.log("> Missing OAR_ID, checking Name"):true;
            theConcept = $("."+theObject.Name).first();
            if (!theConcept || theConcept.length>1) {
                debug? console.log("> Creating Concept"):true;
                theConcept = model.createElement(theObject.Type,theObject.Name);
            }
        }
        debug? console.log(theConcept):true;

        theConcept.name=theObject.Name;
        theConcept.documentation=theObject.Documentation;
        theConcept.type=theObject.Type;

        for (var j=0; j<theDataHeaders.length; j++) {
            switch (theDataHeaders[j]) {
                case "UID":
                case "Name":
                case "Documentation":
                case "Type":
                    break;
                default:
                    if (theObject[theDataHeaders[j]]) {
                        theConcept.prop(theDataHeaders[j],theObject[theDataHeaders[j]]);
                    }
                    else {
                        theConcept.removeProp(theDataHeaders[j]);
                    }
            }
        }
*/
    }
    console.log("> Parsing Complete")
}
else {
    console.log("> Cancelled");
}
